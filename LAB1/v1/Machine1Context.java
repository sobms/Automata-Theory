/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : machine1.sm.sm
 */

package machine;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodHandles.Lookup;
import java.lang.invoke.MethodType;
import statemap.FSMContext7;
import statemap.State7;
import statemap.TransitionHandle;

public class Machine1Context
    extends FSMContext7
{
//---------------------------------------------------------------
// Member methods.
//

    //-----------------------------------------------------------
    // Constructors.
    //

    public Machine1Context(final machine.Machine1 owner)
    {
        this (owner, sStates[MainMap_Start_STATE_ID]);
    }

    public Machine1Context(final machine.Machine1 owner, final int initStateId)
    {
        this (owner, sStates[initStateId]);    }

    public Machine1Context(final machine.Machine1 owner, final State7 initState)
    {
        super (initState);

        ctxt = owner;
    }

    //
    // end of Constructors.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // FSMContext7 Abstract Method Override.
    //

    @Override
    protected void executeAction(final MethodHandle mh)
    {
        try
        {
            mh.invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (mDebugFlag)
            {
                tex.printStackTrace(mDebugStream);
            }
        }

        return;
    }

    //
    // end of FSMContext7 Abstract Method Override.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // Transitions.
    //

    public void BigLetter(char symb)
    {
        mTransition = "BigLetter";
        try
        {
            final TransitionHandle th =
                getState().transition(BigLetter6_TRANSITION_ID);

            if (th.isDefault())
            {
                (th.handle()).invokeExact(this);
            }
            else
            {
                (th.handle()).invokeExact(this, symb);
            }
        }
        catch (Throwable tex)
        {
            if (mDebugFlag)
            {
                tex.printStackTrace(mDebugStream);
            }
        }
        mTransition = "";
        return;
    }

    public void Digit(char symb)
    {
        mTransition = "Digit";
        try
        {
            final TransitionHandle th =
                getState().transition(Digit3_TRANSITION_ID);

            if (th.isDefault())
            {
                (th.handle()).invokeExact(this);
            }
            else
            {
                (th.handle()).invokeExact(this, symb);
            }
        }
        catch (Throwable tex)
        {
            if (mDebugFlag)
            {
                tex.printStackTrace(mDebugStream);
            }
        }
        mTransition = "";
        return;
    }

    public void EOS()
    {
        mTransition = "EOS";
        try
        {
            final TransitionHandle th =
                getState().transition(EOS2_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (mDebugFlag)
            {
                tex.printStackTrace(mDebugStream);
            }
        }
        mTransition = "";
        return;
    }

    public void Equality()
    {
        mTransition = "Equality";
        try
        {
            final TransitionHandle th =
                getState().transition(Equality7_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (mDebugFlag)
            {
                tex.printStackTrace(mDebugStream);
            }
        }
        mTransition = "";
        return;
    }

    public void Letter(char symb)
    {
        mTransition = "Letter";
        try
        {
            final TransitionHandle th =
                getState().transition(Letter5_TRANSITION_ID);

            if (th.isDefault())
            {
                (th.handle()).invokeExact(this);
            }
            else
            {
                (th.handle()).invokeExact(this, symb);
            }
        }
        catch (Throwable tex)
        {
            if (mDebugFlag)
            {
                tex.printStackTrace(mDebugStream);
            }
        }
        mTransition = "";
        return;
    }

    public void Space()
    {
        mTransition = "Space";
        try
        {
            final TransitionHandle th =
                getState().transition(Space4_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (mDebugFlag)
            {
                tex.printStackTrace(mDebugStream);
            }
        }
        mTransition = "";
        return;
    }

    public void Unknown()
    {
        mTransition = "Unknown";
        try
        {
            final TransitionHandle th =
                getState().transition(Unknown8_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (mDebugFlag)
            {
                tex.printStackTrace(mDebugStream);
            }
        }
        mTransition = "";
        return;
    }

    //
    // end of Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MainMap.Start State Transitions.
    //

    private void MainMap_Start_Default()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(sStates[MainMap_Error_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Start_Digit(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Str_num_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Start_EOS()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.Incorrect();
            ctxt.clear_buf();
        }
        finally
        {
            setState(sStates[MainMap_Error_STATE_ID]);
        }

        enterState();


        return;
    }


    //
    // end of MainMap.Start State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MainMap.Str_num State Transitions.
    //

    private void MainMap_Str_num_Default()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(sStates[MainMap_Error_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Str_num_Digit(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Str_num_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Str_num_EOS()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.Incorrect();
            ctxt.clear_buf();
        }
        finally
        {
            setState(sStates[MainMap_Error_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Str_num_Space()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.save_n_str();
            ctxt.clear_buf();
        }
        finally
        {
            setState(sStates[MainMap_Type_name_STATE_ID]);
        }

        enterState();


        return;
    }


    //
    // end of MainMap.Str_num State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MainMap.Type_name State Transitions.
    //

    private void MainMap_Type_name_BigLetter(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
            ctxt.save_type_int();
        }
        finally
        {
            setState(sStates[MainMap_Var_name_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Type_name_Default()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(sStates[MainMap_Error_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Type_name_Digit(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
            ctxt.save_type_int();
        }
        finally
        {
            setState(sStates[MainMap_Var_name_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Type_name_EOS()
    {
        final int stateId = mState.getId();

        if (ctxt.IsVariable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.save_type_int();
                ctxt.save_var();
                ctxt.clear_buf();
                ctxt.Correct();
            }
            finally
            {
                setState(sStates[MainMap_Success_STATE_ID]);
            }

            enterState();
        }
        else
        {
            exitState();

            try
            {
                clearState();
                ctxt.Incorrect();
                ctxt.clear_buf();
            }
            finally
            {
                setState(sStates[MainMap_Error_STATE_ID]);
            }

            enterState();
        }

        return;
    }


    private void MainMap_Type_name_Equality()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.save_type_int();
            ctxt.save_var();
            ctxt.clear_buf();
        }
        finally
        {
            setState(sStates[MainMap_Literals_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Type_name_Letter(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Type_name_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Type_name_Space()
    {
        final int stateId = mState.getId();

        if (ctxt.IsType())
        {
            exitState();

            try
            {
                clearState();
                ctxt.save_type();
                ctxt.clear_buf();
            }
            finally
            {
                setState(sStates[MainMap_Var_name_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MainMap_Type_name_Default();
        }


        return;
    }


    //
    // end of MainMap.Type_name State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MainMap.Var_name State Transitions.
    //

    private void MainMap_Var_name_BigLetter(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Var_name_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Var_name_Default()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(sStates[MainMap_Error_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Var_name_Digit(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Var_name_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Var_name_EOS()
    {
        final int stateId = mState.getId();

        if (ctxt.IsVariable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.save_var();
                ctxt.clear_buf();
                ctxt.Correct();
            }
            finally
            {
                setState(sStates[MainMap_Success_STATE_ID]);
            }

            enterState();
        }
        else
        {
            exitState();

            try
            {
                clearState();
                ctxt.Incorrect();
                ctxt.clear_buf();
            }
            finally
            {
                setState(sStates[MainMap_Error_STATE_ID]);
            }

            enterState();
        }

        return;
    }


    private void MainMap_Var_name_Equality()
    {
        final int stateId = mState.getId();

        if (ctxt.IsVariable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.save_var();
                ctxt.clear_buf();
            }
            finally
            {
                setState(sStates[MainMap_Literals_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MainMap_Var_name_Default();
        }


        return;
    }


    private void MainMap_Var_name_Letter(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Var_name_STATE_ID]);
        }

        enterState();


        return;
    }


    //
    // end of MainMap.Var_name State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MainMap.Literals State Transitions.
    //

    private void MainMap_Literals_BigLetter(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Literals_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Literals_Default()
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(sStates[MainMap_Error_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Literals_Digit(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Literals_STATE_ID]);
        }

        enterState();


        return;
    }


    private void MainMap_Literals_EOS()
    {
        final int stateId = mState.getId();

        if (ctxt.IsVariable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.save_literal();
                ctxt.clear_buf();
                ctxt.Correct();
            }
            finally
            {
                setState(sStates[MainMap_Success_STATE_ID]);
            }

            enterState();
        }
        else if (ctxt.IsNum())
        {
            exitState();

            try
            {
                clearState();
                ctxt.save_literal();
                ctxt.clear_buf();
                ctxt.Correct();
            }
            finally
            {
                setState(sStates[MainMap_Success_STATE_ID]);
            }

            enterState();
        }
        else
        {
            exitState();

            try
            {
                clearState();
                ctxt.Incorrect();
                ctxt.clear_buf();
            }
            finally
            {
                setState(sStates[MainMap_Error_STATE_ID]);
            }

            enterState();
        }

        return;
    }


    private void MainMap_Literals_Letter(char symb)
    {
        final int stateId = mState.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToBuffer(symb);
        }
        finally
        {
            setState(sStates[MainMap_Literals_STATE_ID]);
        }

        enterState();


        return;
    }


    //
    // end of MainMap.Literals State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MainMap.Error State Transitions.
    //

    private void MainMap_Error_BigLetter(char symb)
    {
        final int stateId = mState.getId();

        try
        {
            clearState();
            ctxt.Incorrect();
        }
        finally
        {
            setState(sStates[stateId]);
        }



        return;
    }


    private void MainMap_Error_Digit(char symb)
    {
        final int stateId = mState.getId();

        try
        {
            clearState();
            ctxt.Incorrect();
        }
        finally
        {
            setState(sStates[stateId]);
        }



        return;
    }


    private void MainMap_Error_EOS()
    {
        final int stateId = mState.getId();

        try
        {
            clearState();
            ctxt.Incorrect();
            ctxt.clear_buf();
        }
        finally
        {
            setState(sStates[stateId]);
        }



        return;
    }


    private void MainMap_Error_Equality()
    {
        final int stateId = mState.getId();

        try
        {
            clearState();
            ctxt.Incorrect();
        }
        finally
        {
            setState(sStates[stateId]);
        }



        return;
    }


    private void MainMap_Error_Letter(char symb)
    {
        final int stateId = mState.getId();

        try
        {
            clearState();
            ctxt.Incorrect();
        }
        finally
        {
            setState(sStates[stateId]);
        }



        return;
    }


    private void MainMap_Error_Space()
    {
        final int stateId = mState.getId();

        try
        {
            clearState();
            ctxt.Incorrect();
        }
        finally
        {
            setState(sStates[stateId]);
        }



        return;
    }


    private void MainMap_Error_Unknown()
    {
        final int stateId = mState.getId();

        try
        {
            clearState();
            ctxt.Incorrect();
        }
        finally
        {
            setState(sStates[stateId]);
        }



        return;
    }


    //
    // end of MainMap.Error State Transitions.
    //-----------------------------------------------------------

//---------------------------------------------------------------
// Member data.
//

    transient private machine.Machine1 ctxt;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

    public static final int MainMap_Start_STATE_ID = 0;
    public static final int MainMap_Str_num_STATE_ID = 1;
    public static final int MainMap_Type_name_STATE_ID = 2;
    public static final int MainMap_Var_name_STATE_ID = 3;
    public static final int MainMap_Literals_STATE_ID = 4;
    public static final int MainMap_Success_STATE_ID = 5;
    public static final int MainMap_Error_STATE_ID = 6;

    private static final int STATE_COUNT = 7;

    private static final int BigLetter6_TRANSITION_ID = 1;
    private static final int Digit3_TRANSITION_ID = 2;
    private static final int EOS2_TRANSITION_ID = 3;
    private static final int Equality7_TRANSITION_ID = 4;
    private static final int Letter5_TRANSITION_ID = 5;
    private static final int Space4_TRANSITION_ID = 6;
    private static final int Unknown8_TRANSITION_ID = 7;

    private static final int TRANSITION_COUNT = 8;

    private static final MethodType[] TRANSITION_TYPES =
    {
        NO_ARGS_TYPE,
        MethodType.methodType(void.class, char.class),
        MethodType.methodType(void.class, char.class),
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        MethodType.methodType(void.class, char.class),
        NO_ARGS_TYPE,
        NO_ARGS_TYPE
    };

    private static final String[] MAP_NAMES =
    {
        "MainMap"
    };

    private static final String[][] STATE_NAMES =
    {
        new String[]
        {
            "Start",
            "Str_num",
            "Type_name",
            "Var_name",
            "Literals",
            "Success",
            "Error"
        }
    };

    private static String[][] STATE_TRANSITIONS =
    {
        new String[]
        {
            "Default",
            "Digit",
            "EOS"
        },

        new String[]
        {
            "Default",
            "Digit",
            "EOS",
            "Space"
        },

        new String[]
        {
            "BigLetter",
            "Default",
            "Digit",
            "EOS",
            "Equality",
            "Letter",
            "Space"
        },

        new String[]
        {
            "BigLetter",
            "Default",
            "Digit",
            "EOS",
            "Equality",
            "Letter"
        },

        new String[]
        {
            "BigLetter",
            "Default",
            "Digit",
            "EOS",
            "Letter"
        },

        new String[]
        {
        },

        new String[]
        {
            "BigLetter",
            "Digit",
            "EOS",
            "Equality",
            "Letter",
            "Space",
            "Unknown"
        }
    };

    private static final String[] TRANSITION_NAMES =
    {
        "Default",
        "BigLetter",
        "Digit",
        "EOS",
        "Equality",
        "Letter",
        "Space",
        "Unknown"
    };

    private static final State7[] sStates = new State7[STATE_COUNT];

    static
    {
        final Lookup lookup = MethodHandles.lookup();
        final Class<?> clazz = Machine1Context.class;
        final int mapSize = MAP_NAMES.length;
        int stateSize;
        int mapIndex;
        int stateIndex;
        int transIndex;
        int stateId = 0;
        String mapName;
        String stateName;
        String transName;
        String methodName;
        MethodType transType;
        MethodHandle entryHandle;
        MethodHandle exitHandle;
        TransitionHandle[] transitions;

        for (mapIndex = 0; mapIndex < mapSize; ++mapIndex)
        {
            mapName = MAP_NAMES[mapIndex];
            stateSize = STATE_NAMES[mapIndex].length;

            for (stateIndex = 0; stateIndex < stateSize; ++stateIndex, ++stateId)
            {
                stateName = STATE_NAMES[mapIndex][stateIndex];
                transitions = new TransitionHandle[TRANSITION_COUNT];

                methodName = String.format(ENTRY_NAME, mapName, stateName);
                entryHandle = lookupMethod(lookup, clazz, methodName, NO_ARGS_TYPE);
                methodName = String.format(EXIT_NAME, mapName, stateName);
                exitHandle = lookupMethod(lookup, clazz, methodName, NO_ARGS_TYPE);

                for (transIndex = 1; transIndex < TRANSITION_COUNT; ++transIndex)
                {
                    transName = TRANSITION_NAMES[transIndex];
                    transType = TRANSITION_TYPES[transIndex];
                    transitions[transIndex] =
                        lookupTransition(lookup, clazz, mapName, stateName, transName, transType);
                }

                sStates[stateId] =
                    new State7(
                        String.format(STATE_NAME_FORMAT, mapName, stateName),
                        stateId,
                        entryHandle,
                        exitHandle,
                        transitions,
                        STATE_TRANSITIONS[stateId]);
            }
        }
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
