// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/simple.flex

/* this is the scanner example from the JLex website
   (with small modifications to make it more readable) */
import java.util.ArrayList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int TYPE = 2;
  public static final int VARNAME = 4;
  public static final int LITERAL = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\17\0"+
    "\12\5\3\0\1\6\3\0\32\7\6\0\6\7\1\10"+
    "\1\11\1\12\2\7\1\13\1\7\1\14\1\15\2\7"+
    "\1\16\1\17\1\20\6\7\12\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\1\1\3\1\4\7\3\20\0"+
    "\1\5\1\0\1\6\1\0\1\7\13\0\4\10\16\0"+
    "\4\10\7\0\1\10\1\11\2\10\1\12\5\0\1\10"+
    "\1\11\1\10\1\12\5\0\1\10\1\11\1\12\5\0"+
    "\1\10\1\12\5\0\1\10\1\12\5\0\1\10\1\12"+
    "\5\0\1\10\1\12\5\0\1\10\1\12\5\0\1\10"+
    "\1\12\5\0\1\10\1\12\5\0\1\10\1\12\5\0"+
    "\1\10\1\12\2\0\1\10\1\12\1\10\3\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\104\0\125\0\146\0\167"+
    "\0\210\0\231\0\252\0\252\0\273\0\252\0\314\0\335"+
    "\0\356\0\377\0\u0110\0\u0121\0\u0132\0\u0143\0\104\0\u0154"+
    "\0\u0165\0\u0176\0\u0187\0\u0198\0\u01a9\0\u01ba\0\u01cb\0\u01dc"+
    "\0\u01ed\0\273\0\u01fe\0\u020f\0\u0220\0\u0231\0\252\0\u0242"+
    "\0\u0253\0\u0121\0\252\0\u0132\0\u0264\0\u0275\0\u0286\0\u0297"+
    "\0\u02a8\0\u02b9\0\u02ca\0\u02db\0\u02ec\0\u02fd\0\u030e\0\u031f"+
    "\0\u0330\0\u0341\0\u0352\0\u0363\0\u0374\0\u0385\0\u0396\0\u03a7"+
    "\0\u01dc\0\u03b8\0\u03c9\0\u03da\0\252\0\u03eb\0\u03fc\0\u040d"+
    "\0\u041e\0\u042f\0\u0440\0\u0451\0\u0462\0\u0473\0\u0484\0\u0495"+
    "\0\u04a6\0\u04b7\0\u04c8\0\u04d9\0\u04d9\0\u04ea\0\u04fb\0\u050c"+
    "\0\u051d\0\u052e\0\u053f\0\u0550\0\u0561\0\u0572\0\u0572\0\u0583"+
    "\0\u0594\0\u05a5\0\u05b6\0\u05c7\0\u05d8\0\u05e9\0\u05fa\0\u05fa"+
    "\0\u060b\0\u061c\0\u062d\0\u063e\0\u064f\0\u0660\0\u0671\0\u0682"+
    "\0\u0693\0\u06a4\0\u06b5\0\u06c6\0\u06d7\0\u06e8\0\u06f9\0\u070a"+
    "\0\u071b\0\u072c\0\u073d\0\u074e\0\u075f\0\u0770\0\u0781\0\u0792"+
    "\0\u07a3\0\u07b4\0\u07c5\0\u07d6\0\u07e7\0\u07f8\0\u0809\0\u081a"+
    "\0\u082b\0\u083c\0\u084d\0\u085e\0\u086f\0\u0880\0\u0891\0\u08a2"+
    "\0\u08b3\0\u08c4\0\u08d5\0\u08e6\0\u08f7\0\u0908\0\u0919\0\u092a"+
    "\0\u093b\0\u094c\0\u095d\0\u096e\0\u097f\0\u0990\0\u09a1\0\u09b2"+
    "\0\u09c3\0\u09d4\0\u09e5\0\u09f6\0\u0a07\0\u0a18\0\u0a29\0\u0a3a"+
    "\0\u0a4b\0\u0a5c\0\u0a6d\0\u0a7e\0\252\0\u0a8f\0\u0aa0\0\252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\13\2\14\1\15\13\13\1\16\1\17\1\16\2\14"+
    "\5\16\1\20\1\21\3\16\1\22\2\16\1\17\1\16"+
    "\2\14\2\16\12\23\1\16\1\24\1\16\2\14\1\25"+
    "\1\17\12\26\5\0\1\27\23\0\1\30\7\0\1\31"+
    "\5\0\1\32\1\0\12\33\12\0\1\34\1\35\3\0"+
    "\1\36\10\0\12\37\1\0\1\12\4\0\1\40\34\0"+
    "\1\41\3\0\1\42\14\0\1\17\33\0\1\43\21\0"+
    "\1\44\14\0\1\45\10\0\1\46\1\47\1\0\1\47"+
    "\1\50\1\51\12\50\1\0\1\52\4\0\1\17\14\0"+
    "\1\53\1\0\1\53\1\54\15\0\1\53\1\0\1\53"+
    "\1\55\1\0\12\55\14\0\1\56\20\0\1\57\1\0"+
    "\1\60\7\0\1\61\1\0\12\62\1\0\1\40\3\0"+
    "\1\61\1\0\12\62\14\0\1\63\21\0\1\64\14\0"+
    "\1\65\14\0\1\66\1\0\12\66\1\0\1\40\20\0"+
    "\1\41\5\0\3\67\1\70\1\71\3\67\1\72\1\67"+
    "\20\0\1\73\14\0\1\74\21\0\1\75\4\0\1\46"+
    "\4\0\1\51\13\0\1\46\1\47\1\0\1\47\1\76"+
    "\1\51\12\76\1\0\1\51\21\0\1\53\1\0\1\53"+
    "\1\77\1\0\12\77\15\0\1\100\15\0\1\101\23\0"+
    "\1\102\10\0\1\103\1\0\12\104\1\0\1\40\3\0"+
    "\1\103\1\0\12\104\20\0\1\105\14\0\1\106\21\0"+
    "\1\107\10\0\1\110\1\0\12\110\5\0\1\111\1\0"+
    "\12\111\5\0\1\111\1\0\5\111\1\112\4\111\5\0"+
    "\1\111\1\0\6\111\1\113\3\111\5\0\1\111\1\0"+
    "\2\111\1\114\7\111\1\0\1\115\27\0\1\73\26\0"+
    "\1\43\3\0\1\46\1\47\1\0\1\47\1\116\1\51"+
    "\12\116\2\0\1\53\1\0\1\53\1\117\1\0\12\117"+
    "\13\0\1\101\16\0\1\120\14\0\1\121\1\0\12\122"+
    "\1\0\1\40\3\0\1\121\1\0\12\122\10\0\1\105"+
    "\26\0\1\63\7\0\1\123\1\0\12\123\5\0\1\124"+
    "\1\0\12\124\5\0\1\124\1\0\11\124\1\125\5\0"+
    "\1\124\1\0\5\124\1\126\4\124\5\0\1\124\1\0"+
    "\6\124\1\127\3\124\1\0\1\115\5\0\12\130\1\0"+
    "\1\46\1\47\1\0\1\47\1\131\1\51\12\131\2\0"+
    "\1\53\1\0\1\53\1\132\1\0\12\132\17\0\1\101"+
    "\6\0\1\133\1\0\12\134\1\0\1\40\3\0\1\133"+
    "\1\0\12\134\5\0\1\135\1\0\12\135\5\0\1\136"+
    "\1\0\12\136\5\0\1\136\1\0\1\136\1\137\10\136"+
    "\5\0\1\136\1\0\7\136\1\140\2\136\5\0\1\141"+
    "\1\0\12\141\1\0\1\46\1\47\1\0\1\47\1\142"+
    "\1\51\12\142\2\0\1\53\1\0\1\53\1\143\1\0"+
    "\12\143\5\0\1\144\1\0\12\145\1\0\1\40\3\0"+
    "\1\144\1\0\12\145\5\0\1\146\1\0\12\146\5\0"+
    "\1\147\1\0\12\147\5\0\1\147\1\0\11\147\1\150"+
    "\5\0\1\151\1\0\12\151\1\0\1\46\1\47\1\0"+
    "\1\47\1\152\1\51\12\152\2\0\1\53\1\0\1\53"+
    "\1\153\1\0\12\153\5\0\1\154\1\0\12\155\1\0"+
    "\1\40\3\0\1\154\1\0\12\155\5\0\1\156\1\0"+
    "\12\156\5\0\1\157\1\0\12\157\5\0\1\160\1\0"+
    "\12\160\1\0\1\46\1\47\1\0\1\47\1\161\1\51"+
    "\12\161\2\0\1\53\1\0\1\53\1\162\1\0\12\162"+
    "\5\0\1\163\1\0\12\164\1\0\1\40\3\0\1\163"+
    "\1\0\12\164\5\0\1\165\1\0\12\165\5\0\1\166"+
    "\1\0\12\166\5\0\1\167\1\0\12\167\1\0\1\46"+
    "\1\47\1\0\1\47\1\170\1\51\12\170\2\0\1\53"+
    "\1\0\1\53\1\171\1\0\12\171\5\0\1\172\1\0"+
    "\12\173\1\0\1\40\3\0\1\172\1\0\12\173\5\0"+
    "\1\174\1\0\12\174\5\0\1\175\1\0\12\175\5\0"+
    "\1\176\1\0\12\176\1\0\1\46\1\47\1\0\1\47"+
    "\1\177\1\51\12\177\2\0\1\53\1\0\1\53\1\200"+
    "\1\0\12\200\5\0\1\201\1\0\12\202\1\0\1\40"+
    "\3\0\1\201\1\0\12\202\5\0\1\203\1\0\12\203"+
    "\5\0\1\204\1\0\12\204\5\0\1\205\1\0\12\205"+
    "\1\0\1\46\1\47\1\0\1\47\1\206\1\51\12\206"+
    "\2\0\1\53\1\0\1\53\1\207\1\0\12\207\5\0"+
    "\1\210\1\0\12\211\1\0\1\40\3\0\1\210\1\0"+
    "\12\211\5\0\1\212\1\0\12\212\5\0\1\213\1\0"+
    "\12\213\5\0\1\214\1\0\12\214\1\0\1\46\1\47"+
    "\1\0\1\47\1\215\1\51\12\215\2\0\1\53\1\0"+
    "\1\53\1\216\1\0\12\216\5\0\1\217\1\0\12\220"+
    "\1\0\1\40\3\0\1\217\1\0\12\220\5\0\1\221"+
    "\1\0\12\221\5\0\1\222\1\0\12\222\5\0\1\223"+
    "\1\0\12\223\1\0\1\46\1\47\1\0\1\47\1\224"+
    "\1\51\12\224\2\0\1\53\1\0\1\53\1\225\1\0"+
    "\12\225\5\0\1\226\1\0\12\227\1\0\1\40\3\0"+
    "\1\226\1\0\12\227\5\0\1\230\1\0\12\230\5\0"+
    "\1\231\1\0\12\231\5\0\1\232\1\0\12\232\1\0"+
    "\1\46\1\47\1\0\1\47\1\233\1\51\12\233\2\0"+
    "\1\53\1\0\1\53\1\234\1\0\12\234\5\0\1\235"+
    "\1\0\12\236\1\0\1\40\3\0\1\235\1\0\12\236"+
    "\5\0\1\237\1\0\12\237\5\0\1\240\1\0\12\240"+
    "\5\0\1\241\1\0\12\241\1\0\1\46\1\47\1\0"+
    "\1\47\1\242\1\51\12\242\2\0\1\53\1\0\1\53"+
    "\1\243\1\0\12\243\5\0\1\244\1\0\12\245\1\0"+
    "\1\40\3\0\1\244\1\0\12\245\5\0\1\246\1\0"+
    "\12\246\5\0\1\247\1\0\12\247\5\0\1\250\1\0"+
    "\12\250\1\0\1\46\1\47\1\0\1\47\1\251\1\51"+
    "\12\251\2\0\1\53\1\0\1\53\1\252\1\0\12\252"+
    "\7\0\12\101\1\0\1\40\5\0\12\101\5\0\1\105"+
    "\1\0\12\105\5\0\1\253\1\0\12\253\5\0\1\254"+
    "\1\0\12\254\1\0\1\46\1\47\1\0\1\47\1\0"+
    "\1\51\14\0\1\53\1\0\1\53\21\0\1\255\1\0"+
    "\12\255\5\0\1\256\1\0\12\256\5\0\1\257\1\0"+
    "\12\257\5\0\1\260\1\0\12\260";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2737];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\11\1\1\1\11\11\1\7\0\2\1\6\0"+
    "\1\11\1\0\1\1\1\0\1\11\12\0\5\1\12\0"+
    "\1\11\2\0\5\1\6\0\6\1\4\0\5\1\4\0"+
    "\4\1\4\0\3\1\4\0\3\1\4\0\3\1\4\0"+
    "\3\1\4\0\3\1\4\0\3\1\4\0\3\1\4\0"+
    "\3\1\4\0\3\1\2\0\2\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    ArrayList<String> results = new ArrayList<String>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return 0;
            }
            // fall through
          case 11: break;
          case 2:
            { throw new Error("Illegal character <"+
                                                            yytext()+">");
            }
            // fall through
          case 12: break;
          case 3:
            { yybegin(YYINITIAL); return 0;
            }
            // fall through
          case 13: break;
          case 4:
            { 
            }
            // fall through
          case 14: break;
          case 5:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { results.add(yytext()); yybegin(YYINITIAL); return 1;
            }
            // fall through
          case 15: break;
          case 6:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { results.add(yytext()); yybegin(LITERAL);
            }
            // fall through
          case 16: break;
          case 7:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return 1;
            }
            // fall through
          case 17: break;
          case 8:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 4;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 6;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { results.clear(); results.add(yytext()); results.add("int"); yybegin(VARNAME);
            }
            // fall through
          case 18: break;
          case 9:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 4;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { results.clear(); results.add(yytext()); yybegin(TYPE);
            }
            // fall through
          case 19: break;
          case 10:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 7;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 6;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { results.add(yytext()); yybegin(VARNAME);
            }
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
