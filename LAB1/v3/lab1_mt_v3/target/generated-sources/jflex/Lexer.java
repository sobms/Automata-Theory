// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/simple.flex

/* this is the scanner example from the JLex website
   (with small modifications to make it more readable) */
import java.util.ArrayList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int TYPE = 2;
  public static final int VARNAME = 4;
  public static final int LITERAL = 6;
  public static final int TALE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\1\0\10\1\1\2\1\3\2\4\1\5\22\1\1\2"+
    "\17\1\12\6\3\1\1\7\3\1\32\10\6\1\6\10"+
    "\1\11\1\12\1\13\2\10\1\14\1\10\1\15\1\16"+
    "\2\10\1\17\1\20\1\21\6\10\12\1\1\4\u01a2\1"+
    "\2\4\326\1\u0100\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\1\1\3\7\1\1\3\1\4"+
    "\17\0\1\5\3\0\1\6\1\0\1\7\14\0\4\10"+
    "\16\0\4\10\7\0\1\10\1\11\2\10\1\12\5\0"+
    "\1\10\1\11\1\10\1\12\5\0\1\10\1\11\1\12"+
    "\5\0\1\10\1\12\5\0\1\10\1\12\5\0\1\10"+
    "\1\12\5\0\1\10\1\12\5\0\1\10\1\12\5\0"+
    "\1\10\1\12\5\0\1\10\1\12\5\0\1\10\1\12"+
    "\5\0\1\10\1\12\2\0\1\10\1\12\1\10\3\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\22\0\44\0\66\0\110\0\132\0\154\0\176"+
    "\0\220\0\242\0\264\0\306\0\306\0\330\0\352\0\374"+
    "\0\u010e\0\u0120\0\u0132\0\u0144\0\u0156\0\u0168\0\306\0\306"+
    "\0\132\0\u017a\0\u018c\0\u019e\0\u01b0\0\u01c2\0\u01d4\0\u01e6"+
    "\0\u01f8\0\u020a\0\u021c\0\330\0\u022e\0\u0240\0\u0252\0\306"+
    "\0\u0264\0\u0276\0\u0288\0\u029a\0\u0144\0\306\0\u02ac\0\u0156"+
    "\0\u02be\0\u02d0\0\u02e2\0\u02f4\0\u0306\0\u0318\0\u032a\0\u033c"+
    "\0\u034e\0\u0360\0\u0372\0\u0384\0\u0396\0\u03a8\0\u03ba\0\u03cc"+
    "\0\u03de\0\u03f0\0\u0402\0\u0414\0\u020a\0\u0426\0\u0438\0\u044a"+
    "\0\306\0\u045c\0\u046e\0\u0480\0\u0492\0\u04a4\0\u04b6\0\u04c8"+
    "\0\u04da\0\u04ec\0\u04fe\0\u0510\0\u0522\0\u0534\0\u0546\0\u0558"+
    "\0\u0558\0\u056a\0\u057c\0\u058e\0\u05a0\0\u05b2\0\u05c4\0\u05d6"+
    "\0\u05e8\0\u05fa\0\u05fa\0\u060c\0\u061e\0\u0630\0\u0642\0\u0654"+
    "\0\u0666\0\u0678\0\u068a\0\u068a\0\u069c\0\u06ae\0\u06c0\0\u06d2"+
    "\0\u06e4\0\u06f6\0\u0708\0\u071a\0\u072c\0\u073e\0\u0750\0\u0762"+
    "\0\u0774\0\u0786\0\u0798\0\u07aa\0\u07bc\0\u07ce\0\u07e0\0\u07f2"+
    "\0\u0804\0\u0816\0\u0828\0\u083a\0\u084c\0\u085e\0\u0870\0\u0882"+
    "\0\u0894\0\u08a6\0\u08b8\0\u08ca\0\u08dc\0\u08ee\0\u0900\0\u0912"+
    "\0\u0924\0\u0936\0\u0948\0\u095a\0\u096c\0\u097e\0\u0990\0\u09a2"+
    "\0\u09b4\0\u09c6\0\u09d8\0\u09ea\0\u09fc\0\u0a0e\0\u0a20\0\u0a32"+
    "\0\u0a44\0\u0a56\0\u0a68\0\u0a7a\0\u0a8c\0\u0a9e\0\u0ab0\0\u0ac2"+
    "\0\u0ad4\0\u0ae6\0\u0af8\0\u0b0a\0\u0b1c\0\u0b2e\0\u0b40\0\u0b52"+
    "\0\306\0\u0b64\0\u0b76\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\14\2\15\1\14\1\16\15\14\1\17\2\15\6\14"+
    "\1\20\1\21\3\14\1\22\3\14\1\17\2\15\3\14"+
    "\12\23\2\14\1\24\2\15\1\14\1\25\1\17\12\26"+
    "\3\27\1\30\1\15\15\27\6\0\1\31\24\0\1\32"+
    "\7\0\1\33\6\0\1\34\1\0\12\35\13\0\1\36"+
    "\1\37\3\0\1\40\11\0\12\41\2\0\1\13\4\0"+
    "\1\42\36\0\1\43\3\0\1\44\15\0\1\17\34\0"+
    "\1\45\22\0\1\46\15\0\1\47\7\0\1\50\1\0"+
    "\1\51\2\0\1\52\1\53\1\54\12\53\2\0\1\55"+
    "\4\0\1\17\12\0\1\56\4\0\1\57\1\60\13\0"+
    "\1\56\4\0\1\57\1\61\1\0\12\61\15\0\1\62"+
    "\21\0\1\63\1\0\1\64\10\0\1\65\1\0\12\66"+
    "\2\0\1\42\3\0\1\65\1\0\12\66\15\0\1\67"+
    "\22\0\1\70\15\0\1\71\15\0\1\72\1\0\12\72"+
    "\2\0\1\42\21\0\1\43\5\0\3\73\1\74\1\75"+
    "\3\73\1\76\1\73\21\0\1\77\15\0\1\100\22\0"+
    "\1\101\5\0\1\51\4\0\1\54\15\0\1\50\16\0"+
    "\1\50\1\0\1\51\2\0\1\52\1\102\1\54\12\102"+
    "\2\0\1\54\22\0\1\56\16\0\1\56\4\0\1\57"+
    "\1\103\1\0\12\103\16\0\1\104\16\0\1\105\24\0"+
    "\1\106\11\0\1\107\1\0\12\110\2\0\1\42\3\0"+
    "\1\107\1\0\12\110\21\0\1\111\15\0\1\112\22\0"+
    "\1\113\11\0\1\114\1\0\12\114\6\0\1\115\1\0"+
    "\12\115\6\0\1\115\1\0\5\115\1\116\4\115\6\0"+
    "\1\115\1\0\6\115\1\117\3\115\6\0\1\115\1\0"+
    "\2\115\1\120\7\115\2\0\1\121\30\0\1\77\27\0"+
    "\1\45\2\0\1\50\1\0\1\51\2\0\1\52\1\122"+
    "\1\54\12\122\1\56\4\0\1\57\1\123\1\0\12\123"+
    "\14\0\1\105\17\0\1\124\15\0\1\125\1\0\12\126"+
    "\2\0\1\42\3\0\1\125\1\0\12\126\11\0\1\111"+
    "\27\0\1\67\10\0\1\127\1\0\12\127\6\0\1\130"+
    "\1\0\12\130\6\0\1\130\1\0\11\130\1\131\6\0"+
    "\1\130\1\0\5\130\1\132\4\130\6\0\1\130\1\0"+
    "\6\130\1\133\3\130\2\0\1\121\5\0\12\134\1\50"+
    "\1\0\1\51\2\0\1\52\1\135\1\54\12\135\1\56"+
    "\4\0\1\57\1\136\1\0\12\136\20\0\1\105\7\0"+
    "\1\137\1\0\12\140\2\0\1\42\3\0\1\137\1\0"+
    "\12\140\6\0\1\141\1\0\12\141\6\0\1\142\1\0"+
    "\12\142\6\0\1\142\1\0\1\142\1\143\10\142\6\0"+
    "\1\142\1\0\7\142\1\144\2\142\6\0\1\145\1\0"+
    "\12\145\1\50\1\0\1\51\2\0\1\52\1\146\1\54"+
    "\12\146\1\56\4\0\1\57\1\147\1\0\12\147\6\0"+
    "\1\150\1\0\12\151\2\0\1\42\3\0\1\150\1\0"+
    "\12\151\6\0\1\152\1\0\12\152\6\0\1\153\1\0"+
    "\12\153\6\0\1\153\1\0\11\153\1\154\6\0\1\155"+
    "\1\0\12\155\1\50\1\0\1\51\2\0\1\52\1\156"+
    "\1\54\12\156\1\56\4\0\1\57\1\157\1\0\12\157"+
    "\6\0\1\160\1\0\12\161\2\0\1\42\3\0\1\160"+
    "\1\0\12\161\6\0\1\162\1\0\12\162\6\0\1\163"+
    "\1\0\12\163\6\0\1\164\1\0\12\164\1\50\1\0"+
    "\1\51\2\0\1\52\1\165\1\54\12\165\1\56\4\0"+
    "\1\57\1\166\1\0\12\166\6\0\1\167\1\0\12\170"+
    "\2\0\1\42\3\0\1\167\1\0\12\170\6\0\1\171"+
    "\1\0\12\171\6\0\1\172\1\0\12\172\6\0\1\173"+
    "\1\0\12\173\1\50\1\0\1\51\2\0\1\52\1\174"+
    "\1\54\12\174\1\56\4\0\1\57\1\175\1\0\12\175"+
    "\6\0\1\176\1\0\12\177\2\0\1\42\3\0\1\176"+
    "\1\0\12\177\6\0\1\200\1\0\12\200\6\0\1\201"+
    "\1\0\12\201\6\0\1\202\1\0\12\202\1\50\1\0"+
    "\1\51\2\0\1\52\1\203\1\54\12\203\1\56\4\0"+
    "\1\57\1\204\1\0\12\204\6\0\1\205\1\0\12\206"+
    "\2\0\1\42\3\0\1\205\1\0\12\206\6\0\1\207"+
    "\1\0\12\207\6\0\1\210\1\0\12\210\6\0\1\211"+
    "\1\0\12\211\1\50\1\0\1\51\2\0\1\52\1\212"+
    "\1\54\12\212\1\56\4\0\1\57\1\213\1\0\12\213"+
    "\6\0\1\214\1\0\12\215\2\0\1\42\3\0\1\214"+
    "\1\0\12\215\6\0\1\216\1\0\12\216\6\0\1\217"+
    "\1\0\12\217\6\0\1\220\1\0\12\220\1\50\1\0"+
    "\1\51\2\0\1\52\1\221\1\54\12\221\1\56\4\0"+
    "\1\57\1\222\1\0\12\222\6\0\1\223\1\0\12\224"+
    "\2\0\1\42\3\0\1\223\1\0\12\224\6\0\1\225"+
    "\1\0\12\225\6\0\1\226\1\0\12\226\6\0\1\227"+
    "\1\0\12\227\1\50\1\0\1\51\2\0\1\52\1\230"+
    "\1\54\12\230\1\56\4\0\1\57\1\231\1\0\12\231"+
    "\6\0\1\232\1\0\12\233\2\0\1\42\3\0\1\232"+
    "\1\0\12\233\6\0\1\234\1\0\12\234\6\0\1\235"+
    "\1\0\12\235\6\0\1\236\1\0\12\236\1\50\1\0"+
    "\1\51\2\0\1\52\1\237\1\54\12\237\1\56\4\0"+
    "\1\57\1\240\1\0\12\240\6\0\1\241\1\0\12\242"+
    "\2\0\1\42\3\0\1\241\1\0\12\242\6\0\1\243"+
    "\1\0\12\243\6\0\1\244\1\0\12\244\6\0\1\245"+
    "\1\0\12\245\1\50\1\0\1\51\2\0\1\52\1\246"+
    "\1\54\12\246\1\56\4\0\1\57\1\247\1\0\12\247"+
    "\6\0\1\250\1\0\12\251\2\0\1\42\3\0\1\250"+
    "\1\0\12\251\6\0\1\252\1\0\12\252\6\0\1\253"+
    "\1\0\12\253\6\0\1\254\1\0\12\254\1\50\1\0"+
    "\1\51\2\0\1\52\1\255\1\54\12\255\1\56\4\0"+
    "\1\57\1\256\1\0\12\256\10\0\12\105\2\0\1\42"+
    "\5\0\12\105\6\0\1\111\1\0\12\111\6\0\1\257"+
    "\1\0\12\257\6\0\1\260\1\0\12\260\1\50\1\0"+
    "\1\51\2\0\1\52\1\0\1\54\12\0\1\56\4\0"+
    "\1\57\22\0\1\261\1\0\12\261\6\0\1\262\1\0"+
    "\12\262\6\0\1\263\1\0\12\263\6\0\1\264\1\0"+
    "\12\264";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\2\11\11\1\2\11\1\1\7\0\2\1\5\0"+
    "\1\11\3\0\1\1\1\0\1\11\13\0\5\1\12\0"+
    "\1\11\2\0\5\1\6\0\6\1\4\0\5\1\4\0"+
    "\4\1\4\0\3\1\4\0\3\1\4\0\3\1\4\0"+
    "\3\1\4\0\3\1\4\0\3\1\4\0\3\1\4\0"+
    "\3\1\4\0\3\1\2\0\2\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public static ArrayList<String> clone(ArrayList<String> list) {
        ArrayList<String> copy = new ArrayList<String>();
        for (int i = 0; i < list.size(); i+=1) {
            copy.add(new String(list.get(i)));
        }
        return copy;
    }
    ArrayList<String> results = new ArrayList<String>();
    ArrayList<ArrayList<String>> lines_res = new ArrayList<ArrayList<String>>();
    ArrayList<Integer> answers = new ArrayList<Integer>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return 0;
            }  // fall though
            case 181: break;
            case TYPE: {
              return 0;
            }  // fall though
            case 182: break;
            case VARNAME: {
              return 0;
            }  // fall though
            case 183: break;
            case LITERAL: {
              return 0;
            }  // fall though
            case 184: break;
            default:
        return YYEOF;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { answers.add(0); yybegin(TALE);
            }
            // fall through
          case 11: break;
          case 2:
            { throw new Error("Illegal character <"+
                                                            yytext()+">");
            }
            // fall through
          case 12: break;
          case 3:
            { 
            }
            // fall through
          case 13: break;
          case 4:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 14: break;
          case 5:
            { String variable = yytext(); results.add(variable.substring(0,variable.length()-2)); yybegin(YYINITIAL); answers.add(1); lines_res.add(clone(results));
            }
            // fall through
          case 15: break;
          case 6:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 9;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 10;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { results.add(yytext()); yybegin(LITERAL);
            }
            // fall through
          case 16: break;
          case 7:
            { yybegin(YYINITIAL); answers.add(1); lines_res.add(clone(results));
            }
            // fall through
          case 17: break;
          case 8:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 5;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { results.clear(); results.add(yytext()); results.add("int"); yybegin(VARNAME);
            }
            // fall through
          case 18: break;
          case 9:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 5;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 6;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { results.clear(); results.add(yytext()); yybegin(TYPE);
            }
            // fall through
          case 19: break;
          case 10:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { results.add(yytext()); yybegin(VARNAME);
            }
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
